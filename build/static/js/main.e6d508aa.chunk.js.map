{"version":3,"sources":["components/Header/Header.js","components/Button/Button.js","components/HouseListItem/HouseListItem.js","components/HouseList/HouseList.js","components/HomePage/HomePage.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","to","Component","Button","className","this","props","text","HouseListItem","rating","title","city","price","HouseList","state","houses","map","house","HomePage","App","newHouse","fetch","result","json","data","prevState","newState","results","nextState","Object","assign","setState","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAEA,iC,IAgBeA,E,iLAZX,OACE,6BACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,mB,GANKC,aCHrB,iC,IAUeC,E,iLANX,OACE,4BAAQC,UAAU,UAAUC,KAAKC,MAAMC,U,GAHxBL,aCiBNM,E,iLAfX,OACE,4BACE,2BAAIH,KAAKC,MAAMG,QACf,4BAAKJ,KAAKC,MAAMI,OAChB,6BACE,wCAAcL,KAAKC,MAAMK,MACzB,sCAAYN,KAAKC,MAAMM,QAEzB,2CACA,kBAAC,EAAD,CAAQL,KAAK,0B,GAXOL,aC0CbW,G,kBApCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,OAAQ,CAAC,CACPL,MAAO,UACPD,OAAQ,EACRE,KAAM,UACNC,MAAO,OACN,CACDF,MAAO,UACPD,OAAQ,EACRE,KAAM,UACNC,MAAO,SAZC,E,sEAkBZ,OACE,4BACGP,KAAKS,MAAMC,OAASV,KAAKS,MAAMC,OAAOC,KAAI,SAACC,GAAW,IAC7CR,EAA+BQ,EAA/BR,OAAQC,EAAuBO,EAAvBP,MAAOC,EAAgBM,EAAhBN,KAAMC,EAAUK,EAAVL,MAC7B,OACE,kBAAC,EAAD,CAAeH,OAAQA,EAAQC,MAAOA,EAAMC,KAAMA,EAAMC,MAAOA,OAGjE,6BACE,yEACA,kBAAC,EAAD,CAAQL,KAAK,oB,GA7BDL,cCJxB,iC,IAaegB,E,iLATX,OACE,oCACE,yCACA,kBAAC,EAAD,W,GALehB,aCkCRiB,E,YAjCb,aAAe,IAAD,8BACZ,+CAEKL,MAAQ,CACXC,OAAQ,GACRK,SAAU,IALA,E,yNAUSC,MAAM,W,cAArBC,E,gBACaA,EAAOC,O,OAApBC,E,OAEAC,EAAYpB,KAAKS,MACjBY,EAAW,CAAEX,OAAQS,EAAKG,SAC1BC,EAAYC,OAAOC,OAAO,GAAIL,EAAWC,GAC/CrB,KAAK0B,SAASH,G,sIAId,OACE,kBAAC,IAAD,KACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWhB,W,GA1B3BhB,aCQEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6d508aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport(\"./Header.css\");\n\nclass Header extends Component {\n  render() {\n    return(\n      <div>\n        <nav>\n          <ul>\n            <li><Link to=\"/\">My List</Link></li>\n          </ul>\n        </nav>\n      </div>\n    )\n  }\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport(\"./Button.css\");\n\nclass Button extends Component {\n  render() {\n    return (\n      <button className=\"button\">{this.props.text}</button>\n    )\n  }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from \"../Button/Button\";\n\nclass HouseListItem extends Component {\n  render() {\n    return (\n      <li>\n        <p>{this.props.rating}</p>\n        <h3>{this.props.title}</h3>\n        <div>\n          <p>Location: {this.props.city}</p>\n          <p>Price: ${this.props.price}</p>\n        </div>\n        <p>More details</p>\n        <Button text=\"Delete from list\" />\n      </li>\n    );\n  };\n};\n\nexport default HouseListItem;","import React, { Component } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport \"../HouseListItem/HouseListItem\";\n\nimport './HouseList.css';\nimport HouseListItem from \"../HouseListItem/HouseListItem\";\n\nclass HouseList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      houses: [{\n        title: \"House 1\",\n        rating: 4,\n        city: \"Toronto\",\n        price: 999000\n      }, {\n        title: \"House 2\",\n        rating: 8,\n        city: \"Toronto\",\n        price: 999000\n      }]\n    }\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.houses ? this.state.houses.map((house) => {\n          const { rating, title, city, price } = house;\n          return (\n            <HouseListItem rating={rating} title={title}city={city} price={price}/>\n          )\n        }) : (\n          <div>\n            <p>There are currently no houses on your list</p>\n            <Button text=\"Add House\" />\n          </div>\n        )} \n      </ul>\n    );\n  }\n};\n\nexport default HouseList;","import React, { Component } from \"react\";\n\nimport HouseList from \"../HouseList/HouseList\";\n\nimport(\"./HomePage.css\");\n\nclass HomePage extends Component {\n  render() {\n    return(\n      <>\n        <h1>Home Page</h1>\n        <HouseList />\n      </>\n    )\n  }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Header from \"../Header/Header\";\nimport HomePage from \"../HomePage/HomePage\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      houses: [],\n      newHouse: ''\n    }\n  }\n\n  async componentDidMount() {\n    const result = await fetch('/houses');\n    const data = await result.json();\n\n    const prevState = this.state;\n    const newState = { houses: data.results };\n    const nextState = Object.assign({}, prevState, newState);\n    this.setState(nextState);\n  }\n\n  render () {\n    return (\n      <Router>\n        <div className='App'>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* global fetch */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}